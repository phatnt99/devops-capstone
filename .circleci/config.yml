version: 2.1

jobs:
  do-lint:
    docker:
      - image: python:3.7.3-stretch
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - run: 
          name: Install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            make install
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
            chmod +x /bin/hadolint
      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}
      - run:
          name: run lint
          command: |
            . venv/bin/activate
            make lint

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure network exists
          command: |
            aws cloudformation deploy \
              --template-file cloudformation/network.yml \
              --tags project=final \
              --stack-name "network-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides file://cloudformation/common-params.json \
              --capabilities "CAPABILITY_IAM" "CAPABILITY_NAMED_IAM"
      - run:      
          name: Ensure EKS cluster exists
          no_output_timeout: 30m
          command: |
            aws cloudformation deploy \
              --template-file cloudformation/cluster.yml \
              --tags project=final \
              --stack-name "cluster-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides file://cloudformation/eks-params.json \
              --capabilities "CAPABILITY_IAM" "CAPABILITY_NAMED_IAM"

      - run:      
          name: Ensure EKS node group exists
          command: |
            aws cloudformation deploy \
              --template-file cloudformation/nodes.yml \
              --tags project=final \
              --stack-name "node-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides file://cloudformation/eks-node.json \
              --capabilities "CAPABILITY_IAM" "CAPABILITY_NAMED_IAM"       

  deploy-docker-v1:
    docker:
      - image: docker:17.05.0-ce-git
    working_directory: ~/repo  
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build & Push Docker image
          command: |
            pwd
            export DOCKER_PATH=phatryo99/finalproject
            export PROJECT_NAME=finalproject
            docker build --tag=$PROJECT_NAME app-v1/
            docker login -u ${DOCKER_USER} -p ${DOCKER_PWD}
            docker tag $PROJECT_NAME $DOCKER_PATH:v1
            docker push $DOCKER_PATH

  deploy-cluster:
    docker:         
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install tar utility
          command: |
            yum install -y tar gzip      
      
      - run:
          name: Install dependencies
          command: |
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            chmod +x kubectl
            mkdir -p ~/.local/bin
            mv ./kubectl ~/.local/bin/kubectl
            export PATH=~/.local/bin:$PATH
            kubectl version --client
            pwd
        
      - run:
          name: Deploy cluster
          command: |
            pwd
            ~/.local/bin/kubectl version --client
            aws eks --region us-east-1 update-kubeconfig --name FinalProjectEKS
            ~/.local/bin/kubectl get svc
            ~/.local/bin/kubectl apply -f deployment.yaml
            ~/.local/bin/kubectl get deployments
            ~/.local/bin/kubectl get services
            ~/.local/bin/kubectl get nodes
            ~/.local/bin/kubectl get pods

  deploy-docker-v2:
    docker:
      - image: docker:17.05.0-ce-git
    working_directory: ~/repo  
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build & Push Docker image
          command: |
            export DOCKER_PATH=phatryo99/finalproject
            export PROJECT_NAME=finalproject
            docker build --tag=$PROJECT_NAME app-v2/
            docker login -u ${DOCKER_USER} -p ${DOCKER_PWD}
            docker tag $PROJECT_NAME $DOCKER_PATH:v2
            docker push $DOCKER_PATH  
  
  rolling-update:
    docker:         
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install tar utility
          command: |
            yum install -y tar gzip      
      
      - run:
          name: Install dependencies
          command: |
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            chmod +x kubectl
            mkdir -p ~/.local/bin
            mv ./kubectl ~/.local/bin/kubectl
            export PATH=~/.local/bin:$PATH
            kubectl version --client
            pwd
        
      - run:
          name: Deploy cluster
          command: |
            pwd
            ~/.local/bin/kubectl version --client
            aws eks --region us-east-1 update-kubeconfig --name FinalProjectEKS
            ~/.local/bin/kubectl get svc
            ~/.local/bin/kubectl set image deployment/final-project finalproject=phatryo99/finalproject:v2
            echo "Update result: "
            ~/.local/bin/kubectl rollout status deployment/final-project

  clean-up:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: 
          name: Delete stacks
          command: |
            aws cloudformation delete-stack --stack-name "network-${CIRCLE_WORKFLOW_ID:0:7}"
            aws cloudformation delete-stack --stack-name "cluster-${CIRCLE_WORKFLOW_ID:0:7}"
            aws cloudformation delete-stack --stack-name "node-${CIRCLE_WORKFLOW_ID:0:7}"

  info:
    docker:         
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install tar utility
          command: |
            yum install -y tar gzip      
      
      - run:
          name: Install dependencies
          command: |
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            chmod +x kubectl
            mkdir -p ~/.local/bin
            mv ./kubectl ~/.local/bin/kubectl
            export PATH=~/.local/bin:$PATH
            kubectl version --client
            pwd
        
      - run:
          name: Deploy cluster
          command: |
            pwd
            ~/.local/bin/kubectl version --client
            aws eks --region us-east-1 update-kubeconfig --name FinalProjectEKS
            ~/.local/bin/kubectl get svc
            ~/.local/bin/kubectl get deployments
            ~/.local/bin/kubectl get services
            ~/.local/bin/kubectl get nodes
            ~/.local/bin/kubectl get pods  

workflows:
  default:
    jobs:
      - deploy-docker-v1
      - deploy-cluster:
          requires: [deploy-docker-v1]
      - deploy-docker-v2:
          requires: [deploy-cluster]
      - rolling-update:
          type: approval
          requires: [deploy-docker-v2]